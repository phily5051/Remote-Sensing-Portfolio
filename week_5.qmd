---
title: "Introduction to Google Earth Engine"
bibliography: references.bib
editor: visual
---

<h1>5 Introduction to Google Earth Engine</h1>

<h2>5.1 Summary</h2>

<h3>5.1.1 What is Google Earth Engine (GEE)</h3>

[**Google Earth Engine**](https://earthengine.google.com/) is a [planetary-scale geo-spatial analysis platform]{.underline}. It enables users to keep track of changes and quantify differences on Earth's surface.

```{r echo=FALSE, out.width='60%',  out.height= "40%", fig.align='center', fig.cap= "Illustration of GEE Mechanism (Source: [Google Earth Engine](https://earthengine.google.com/#:~:text=Google%20Earth%20Engine%20combines%20a,differences%20on%20the%20Earth's%20surface.))"}
knitr::include_graphics('img/gee.png')
```

<h3>5.1.2 Pros & Cons of GEE</h3>

The advantages and disadvantages of GEE are as follows:

-   Pros:

    -   GEE stores various, rich and ready-to-use datasets within its server

    -   Cloud-based processing: quickly analyses big data

    -   User-friendly interface: easy and free access

    -   Enormous potential to collaborate with state-of-the-art technologies (Deep learning and Machine Learning)

-   Cons:

    -   Easy access could mean the potential possibilities for inappropriate use by some criminals

    -   Dependence on Google: concerns around data privacy and security

    -   Learning curve: coding with Javascript can be challenging

    -   Limited data types: profoundly limited to satellite imagery, which may not provide access to all the data types that people need

<h3>5.1.3 Aggregating Pixels in GEE</h3>

*To allow large computations*, GEE provides users with [various scale]{.underline} options to choose from. When an image is fed into GEE, many lower resolution versions of the image are pre-computed, and these are known as `Image Pyramids`.

```{r echo=FALSE, out.width='60%', out.height= "40%", fig.align='center', fig.cap= "GEE Image Pyramids (Source: [Google Earth Engine](https://developers.google.com/earth-engine/guides/scale#image-pyramids))"}
knitr::include_graphics('img/Pyramids.png')
```

The lowest level of the image pyramid represents native resolution. The ingested image data are aggregated to a higher pyramid levels until it reaches [256 \* 256]{.underline} pixel tiles. At this aggregation process, GEE uses *nearest neighbors* by default [Google Earth Engine](https://developers.google.com/earth-engine/guides/scale#image-pyramids). By default, the pyramid tiles are created by calculating *mean* values. This is called **resampling**.

```{r echo=FALSE, out.width='70%', out.height= "45%", fig.align='center', fig.cap="Example of Resampling (Source: [SpatialThoughts](https://spatialthoughts.com/2021/05/13/aggregating-population-data-gee/))"}
knitr::include_graphics('img/resampling_ex.png')
```

<h3>5.1.4 Objects in GEE</h3>

There are **9 object classes** in GEE. Each class has its own class-specific functions to load and manipulate data.

```{r echo=FALSE, out.width='70%', out.height= "45%", fig.align='center', fig.cap="Earth Engine Class Types (Source: [Google Earth Engine](https://developers.google.com/earth-engine/guides/objects_methods_overview))"}
knitr::include_graphics('img/classtype.png')
```

<h3>5.1.5 Applicable Processes in GEE</h3>

-   Reducing images by regions:

    -   `By region(s)`: It reduces all the pixels in the region(s) to a statistic of the pixel data in the region(s). We can take an image and generate statistics for it.

*Note*. The images of code and result below are adjusted from the [lecture and practical](https://andrewmaclachlan.github.io/CASA0023/00-course_info.html). Here, I used the Global Forest Change datasets to see the average reflectance for each band within Sierra Nevada, USA.

```{r echo=FALSE, out.width='80%', out.height= "70%", fig.align='center', fig.cap="Code for reducing images by region - Mean values of Tree loss & Tree cover"}
knitr::include_graphics('img/reduce_ex_code.png')
```

```{r echo=FALSE, out.width='80%', out.height= "70%", fig.align='center', fig.cap="Results of reducing images by region on GEE Code Editor - Mean values of Tree loss & Tree cover"}
knitr::include_graphics('img/reduce_ex.png')
```

-   Reducing images by neighbourhoods:

    -   `By neighbourhoods`: The neighbourhoods of a pixel in an image can be used to reduce the image.

```{r echo=FALSE, out.width='30%', out.height= "20%", fig.align='center', fig.cap= "Reducing Images by neighbourhoods (Source: [Google Earth Engine](https://developers.google.com/earth-engine/guides/reducers_reduce_neighborhood))"}
knitr::include_graphics('img/Reduce_Neighborhood.png')
```

<h2>5.2 Application</h2>

Google Earth Engine has been widely applied, ranging from forest and vegetation studies to medical fields such as malaria [@rs10101509]. The display of satellite imagery on GEE has enabled us to identify any change occurred during a certain period of time. However, I was wondering whether detecting changes in land cover is the only thing that GEE can offer.

In this section, I will focus on [how GEE can be applied in collaboration with Machine Learning technologies]{.underline}, and what are the benefits of considering technological fusion.

<h3>5.2.1 Brief Information about a Research</h3>

@ijgi9100580 mapped and monitored the rainforests change in Brazil from 2000 and 2019.

-   Data:

    -   Building a model: Sentinel-2 and Landsat 5, 7 and 8 were used

    -   Model validation: the China-Brazilian Earth Resources Satellite (CBERS) high-resolution panchromatic data were used to validate the results of the classification.

-   Model building:

    -   The whole process of building `Random Forest (RF)` algorithm was implemented on GEE platform

        -   The training sets - 80% for model building, and 20% for assessing the performance

    -   Model validation: a validation of the classification results was done by using high resolution (HiRes) data from CBERS

        -   Due to availability of the free HiRes data, the validation was only available for the maps of years 2010, 2015 and 2019

```{r echo=FALSE, out.width='60%', out.height= "40%", fig.align='center', fig.cap="Work Flow of the research (Source: @ijgi9100580)"}
knitr::include_graphics('img/gee_abstract.jpg')
```

-   Results: The RF algorithm captured the deforestation patterns with accuracy.

```{r echo=FALSE, out.width='75%', out.height= "40%", fig.align='center', fig.cap= "RF Classification results - (a) Landsat 7 for 2000; (b) Landsat 5 for 2006; (c) Landsat 5 for 2010; (d) Landsat 8 for 2015; (e) Sentinel-2 for 2019 (Source: @ijgi9100580)"}
knitr::include_graphics('img/classification_rf.jpg')
```

```{r echo=FALSE, out.width='75%', out.height= "170%", fig.align='center', fig.cap= "RF model's validation results (Source: @ijgi9100580)"}

knitr::include_graphics('img/confusion.png')
```

*A bit of Thought.....*

The above research was utilising GEE as a main platform to build a ML model. It was very interesting to see how the GEE platform can be used apart from monitoring land cover change.

However, I would like to point out an overfitting issue. If we look at the validation results, the accuracy of the model is `too good to be true`!! Can we be sure that training and test data are appropriately separated? The authors only mentioned that they separated the data but did not give a detailed explanation how they did it.

<h2>5.3 Reflection</h2>

This week's content was an introductory lecture for the GEE. The whole concept was somewhat very new and interesting for me as I have not ever heard of GEE before.

Here are the things I noted while studying the GEE.

Things I liked!!

1.  `Datasets`: are stored within GEE server so it was very convenient. Storing data always took up a lot of memory in my computer and sometimes it was hard to set up or remember a directory whenever I had to proceess data on R. The datasets on server saved so much space in my computer as well as the ready-made code to import the datasets was really easy.

2.  `Fast`: spatial join and reducing images were much faster on GEE. With a few lines of code, I was able to get the results I wanted which would require lots of lines in other programming languages.

Things I didn't like?!

1.  `Javascript`: was a bit confusing. It kinds of looked similar to Python, but it was quite different in terms of defining variables.
2.  `Image Export`: was quite challenging which I spent so much time!

*A bit of Thought.....*

I noticed that most of datasets stored within the GEE server were mostly about "[environment-related datasets]{.underline}". Moreover, many of the [on-going research]{.underline} were mainly focusing on [identifying change in the natural environment]{.underline}...

Thus, I was wondering whether there is any current research in the context of urban environment by using the GEE platform. Although the change in an urban setting might not be as distinctive as deforestation, cities are growing and urban infrastructures are always changing. This gives us enough reason to make use of GEE to better understand fast-changing cities. Therefore, in the next session, I would love to do more research about how GEE can be potentially utilised in the urban environment.

<h2>References</h2>

Google Earth Engine (n.d.) <https://earthengine.google.com/> (Accessed: 28.02.2023)

SpatialThoughts (2021) <https://spatialthoughts.com/2021/05/13/aggregating-population-data-gee/> (Accessed: 28.02.2023)
